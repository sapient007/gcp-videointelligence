resource_types:
  - name: gcs-resource
    type: docker-image
    source:
      repository: frodenas/gcs-resource

resources:
- name: aistreamer-image
  type: docker-image
  source:
    repository: gcr.io/iot-video-demo/aistreamser
    tag: v8
    username: _json_key
    password: ((GCP_KEY))

- name: results
  type: gcs-resource
  source:
    bucket: ((GCS_BUCKET))
    json_key: ((GCP_KEY))
    versioned_file: hls-output.txt

- name: aistreamer
  type: git
  source:
    uri: https://github.com/sapient007/aistreamer.git

- name: video-intelligence-parser
  type: git
  source:
    uri: https://github.com/sapient007/video-intelligence-parser.git

jobs:
- name: streaming-video-HLS-to-GCS
  plan:
  - aggregate:
    - get: aistreamer-image
  - task: process-streaming-video
    image: aistreamer-image
    config:
      platform: linux
      outputs:
      - name: video-intelligence-results
      params:
        GCP_KEY: ((GCP_KEY))
        CONFIG_FILE: ((CONFIG_FILE))
        HLS_SOURCE: ((hls_source))
      run:
        path: bash
        args:
        - "-c"
        - |
          set -eux

          echo "exporting pipeline"

          #login to gclouod
          echo $GCP_KEY > service.key

          #set up pipeline location
          export PIPE_NAME=video-feed-pipe
          mkfifo $PIPE_NAME
          echo $PIPE_NAME
          echo $HLS_SOURCE

          #Run AIStreamer ingestion proxy
          export CONFIG=cpp/$CONFIG_FILE
          echo export $CONFIG
      
          echo "export GCP Keys"
          export GOOGLE_APPLICATION_CREDENTIALS=service.key

          cp -R /google/cpp/ cpp/

          #start streaming
          gst-launch-1.0 -v souphttpsrc location=$HLS_SOURCE ! hlsdemux connection-speed=16 ! filesink location=$PIPE_NAME &> video-intelligence-results/gst-launch-hls-output.txt &

          #start processing
          ./cpp/streaming_client_main --alsologtostderr --endpoint "dns:///videointelligence.googleapis.com" --video_path=$PIPE_NAME --use_pipe=true --config=$CONFIG &> video-intelligence-results/hls-output.txt

  - put: results
    params:
      file: "video-intelligence-results/hls-output.txt"

- name: streaming-video-RTSP-to-GCS
  plan:
  - aggregate:
    - get: aistreamer-image
    - get: aistreamer
  - task: process-streaming-video-rtsp
    image: aistreamer-image
    config:
      platform: linux
      inputs:
      - name: aistreamer
      outputs:
      - name: video-intelligence-results
      params:
        GCP_KEY: ((GCP_KEY))
        GCS_BUCKET: ((GCS_BUCKET))
        CONFIG_FILE: ((CONFIG_FILE))
        RTSP_SOURCE: ((RTSP_SOURCE))
        GCP_PROJECT: ((GCP_PROJECT))
        RTSP_USER: ((video_user))
        RTSP_USER_PASS: ((video_pass))
      run:
        path: bash
        args:
        - "-c"
        - |
          set -eux

          echo "exporting pipeline"
          
          # create date variable:
          NOW=$(date +"%m_%d_%Y")
          #login to gclouod
          echo $GCP_KEY > service.key

          #log in to GCP
          gcloud auth activate-service-account --project=$GCP_PROJECT --key-file=service.key

          #set up pipeline location
          export PIPE_NAME=video-feed-pipe
          mkfifo $PIPE_NAME
          echo $PIPE_NAME
          echo $RTSP_SOURCE

          #Run AIStreamer ingestion proxy
          export CONFIG=cpp/$CONFIG_FILE
          echo export $CONFIG
      
          echo "export GCP Keys"
          export GOOGLE_APPLICATION_CREDENTIALS=service.key

          cp -R /google/cpp/ cpp/

          #start streaming
          gst-launch-1.0 -v rtspsrc location=$RTSP_SOURCE user-id=$RTSP_USER user-pw=$RTSP_USER_PASS protocols="tcp" tcp-timeout=0 latency=20000000 timeout=0 ! rtpjitterbuffer ! rtph264depay ! h264parse ! flvmux ! filesink location=$PIPE_NAME &> video-intelligence-results/gst-launch-rtsp-output-$NOW.txt & 

          #start processing
          ./cpp/streaming_client_main --alsologtostderr --endpoint "dns:///videointelligence.googleapis.com" --video_path=$PIPE_NAME --use_pipe=true --config=$CONFIG &> video-intelligence-results/rtsp-output-$NOW.txt & 

          #wait for pipe to setup 
          #currently stop at 20mins. 
          COUNTER=0
          while [  $COUNTER -lt 20 ]; do
            #sleep for 2mins
            sleep 2m
            let COUNTER=COUNTER+2 
            gsutil rsync -C video-intelligence-results/ gs://$GCS_BUCKET/ || true
          done

- name: streaming-video-RTSP-Python
  plan:
  - aggregate:
    - get: aistreamer-image
    - get: aistreamer
  - task: process-streaming-video-rtsp
    image: aistreamer-image
    config:
      platform: linux
      inputs:
      - name: aistreamer
      outputs:
      - name: video-intelligence-results
      params:
        GCP_KEY: ((GCP_KEY))
        GCS_BUCKET: ((GCS_BUCKET))
        CONFIG_FILE: ((CONFIG_FILE))
        RTSP_SOURCE: ((RTSP_SOURCE))
        GCP_PROJECT: ((GCP_PROJECT))
        RTSP_USER: ((video_user))
        RTSP_USER_PASS: ((video_pass))
      run:
        path: bash
        args:
        - "-c"
        - |
          set -eux

          echo "exporting pipeline"
          
          # create date variable:
          NOW=$(date +"%m_%d_%Y")
          #login to gclouod
          echo $GCP_KEY > service.key

          #log in to GCP
          gcloud auth activate-service-account --project=$GCP_PROJECT --key-file=service.key

          #set up pipeline location
          export PIPE_NAME=video-feed-pipe
          mkfifo $PIPE_NAME
          echo $PIPE_NAME
          echo $RTSP_SOURCE

          #Run AIStreamer ingestion proxy
          export CONFIG=cpp/$CONFIG_FILE
          echo export $CONFIG
      
          echo "export GCP Keys"
          export GOOGLE_APPLICATION_CREDENTIALS=service.key

          cp -R /google/cpp/ cpp/

          #start streaming
          gst-launch-1.0 -v rtspsrc location=$RTSP_SOURCE user-id=$RTSP_USER user-pw=$RTSP_USER_PASS protocols="tcp" tcp-timeout=0 latency=20000000 timeout=0 ! rtpjitterbuffer ! rtph264depay ! h264parse ! flvmux ! filesink location=$PIPE_NAME &> video-intelligence-results/gst-launch-rtsp-output-$NOW.txt & 

          # start python program
          python aistreamer/ingestion/client/python/streaming_object_tracking_camera.py $PIPE_NAME
          
- name: Continuous-Streaming-RTSP-Pub-Sub
  plan:
  - aggregate:
    - get: aistreamer-image
    - get: aistreamer
    - get: video-intelligence-parser
  - task: process-streaming-video-rtsp
    image: aistreamer-image
    config:
      platform: linux
      inputs:
      - name: aistreamer
      - name: video-intelligence-parser
      outputs:
      - name: video-intelligence-results
      params:
        GCP_KEY: ((GCP_KEY))
        GCS_BUCKET: ((GCS_BUCKET))
        CONFIG_FILE: ((CONFIG_FILE))
        RTSP_SOURCE: ((RTSP_SOURCE))
        GCP_PROJECT: ((GCP_PROJECT))
        RTSP_USER: ((video_user))
        RTSP_USER_PASS: ((video_pass))
        PUB_SUB_TOPIC: ((PUB_SUB_TOPIC))
        RUNTIME: ((runtime))
        DETECT_OBJ_NAME: ((DETECT_OBJ_NAME))
        DETECT_OBJ_CONFIDENCE: ((DETECT_OBJ_CONFIDENCE))
      run:
        path: bash
        args:
        - "-c"
        - |
          set -eux

          echo "exporting pipeline"
          
          # create date variable:
          NOW=$(date +"%m_%d_%Y")

          #login to gclouod
          echo $GCP_KEY > service.key

          #log in to GCP
          gcloud auth activate-service-account --project=$GCP_PROJECT --key-file=service.key

          #set up pipeline location
          export PIPE_NAME=video-feed-pipe
          mkfifo $PIPE_NAME
          echo $PIPE_NAME
          echo $RTSP_SOURCE

          #Run AIStreamer ingestion proxy
          export CONFIG=cpp/$CONFIG_FILE
          echo export $CONFIG
      
          echo "export GCP Keys"
          export GOOGLE_APPLICATION_CREDENTIALS=service.key

          cp -R /google/cpp/ cpp/

          #start streaming
          gst-launch-1.0 -v rtspsrc location=$RTSP_SOURCE user-id=$RTSP_USER user-pw=$RTSP_USER_PASS protocols="tcp" tcp-timeout=0 latency=20000000 timeout=0 ! rtpjitterbuffer ! rtph264depay ! h264parse ! flvmux ! filesink location=$PIPE_NAME  &> video-intelligence-results/gst-launch-rtsp-output-$NOW.txt & 
          export DATE_TIME=$(date '+%d/%m/%Y %H:%M:%S')
          echo "streaming time:" $DATE_TIME

          #this sleep step is needed to ensure we have enough video buffer so that the streaming client does not reach end of file when uploading
          sleep 15

          #start processing
          ./cpp/streaming_client_main --alsologtostderr -timeout $RUNTIME --endpoint "dns:///videointelligence.googleapis.com" --video_path=$PIPE_NAME --use_pipe=true --config=$CONFIG &> video-intelligence-results/rtsp-output-$NOW.txt & 
          
          # allow for some time for the results to arrive
          sleep 5

          #start python code to monitor output 
          python video-intelligence-parser/video-intelligence-parser.py video-intelligence-results/rtsp-output-$NOW.txt &

          echo "going to run this job for " + $RUNTIME + " secs"
          
          sleep $RUNTIME
          echo "done"
